type: edu
custom_name: stage3
files:
- name: translator/translator.py
  visible: true
  text: |+
    import requests
    from bs4 import BeautifulSoup


    class MultilingualTranslator:

        def __init__(self):
            self.language = ""
            self.word_to_translate = ""
            self.languages_dict = {"en": "english", "fr": "french"}
            self.translated_words_list = []
            self.translated_examples_list = []

        def chosen_language(self):
            print("Type \"en\" if you want to translate from French into English, "
                  "or \"fr\" if you want to translate from English into French:")
            self.language = input()

        def chosen_word(self):
            print("Type the word you want to translate")
            self.word_to_translate = input()

        def main_menu(self):
            self.chosen_language()
            self.chosen_word()
            print('You chose "{}" as a language to translate "{}" to.'.format(self.language, self.word_to_translate))
            headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
            result = requests.post(self.url_generator(), headers=headers)
            if result.status_code == 200:
                print("200 OK")
                print("Translations")
                self.translated_words(result)
                self.translated_examples(result)

        def translated_words(self, result):
            src = result.content
            soup = BeautifulSoup(src, "lxml")
            words = soup.find_all("a", {"class": "translation"})
            for word in words:
                self.translated_words_list.append(word.text.strip())
            print(self.translated_words_list)

        def translated_examples(self, result):
            src = result.content
            soup = BeautifulSoup(src, "lxml")
            sentences = soup.find_all("div", {"class": "ltr"})
            for sentence in sentences:
                self.translated_examples_list.append(sentence.text.strip())
            print(self.translated_examples_list)

        def url_generator(self):
            web_page = "https://context.reverso.net/translation/"
            url = None
            if self.language == "en":
                url = web_page + "french-english/" + self.word_to_translate
            elif self.language == "fr":
                url = web_page + "english-french/" + self.word_to_translate
            return url


    test = MultilingualTranslator()
    test.main_menu()

  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import requests
    from itertools import chain
    from bs4 import BeautifulSoup
    import sys


    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TranslatorTest(StageTest):
        def generate(self):
            return [
                TestCase(stdin='fr\nhello\n', attach="fr\nhello"),
                TestCase(stdin='fr\nbrotherhood\n', attach="fr\nbrotherhood"),
                TestCase(stdin='fr\nengland\n', attach="fr\nengland"),
                TestCase(stdin='en\nfromage\n', attach="en\nfromage"),
            ]

        def check(self, reply, attach):
            language, word = attach.split("\n")

            if '200 OK' not in reply:
                return CheckResult.wrong("There isn't internet connection identifier.")

            if "translation" not in reply.lower():
                return CheckResult.wrong("Your program should output the phrase \"<Language> Translations\" "
                                         "before printing the translations of the word.")
            if reply.index("200 OK") > reply.lower().index("translation"):
                return CheckResult.wrong("The word \"Translations\" should follow the internet connection identifier.")

            translations = reply[reply.lower().index("translation"):].strip()

            if "example" not in translations.lower():
                return CheckResult.wrong("Your program should output the phrase \"<Language> Examples\" "
                                         "before printing the examples of the translations.\n "
                                         "The examples should also follow the translations.")

            examples_index = translations.lower().index("example")
            examples = translations[examples_index:].strip().split("\n")
            examples = [line for line in examples if line and not line.lower().startswith('example')]

            translations = translations[:examples_index].split("\n")[:-1]
            translations = [line for line in translations if line and not line.lower().startswith('translation')]

            if len(translations) == 0:
                return CheckResult.wrong("No translations are found. \n"
                                         "Make sure that each translated word is placed in a new line.")

            if len(examples) == 0:
                return CheckResult.wrong("No context examples are found. \n"
                                         "Make sure that your context examples follow the translations \n"
                                         "and that each example is placed in a new line.")

            true_translations, true_examples = get_results(language, word)

            translations_intersection = [True for user_translation in translations
                                         if user_translation.lower() in true_translations]

            if not translations_intersection:
                return CheckResult.wrong("No correct translations are found.\n"
                                         "Make sure that you place every word in a new line \n"
                                         "and get rid of lists' commas, quotation marks and square brackets.")

            examples_intersection = [True for user_example in examples if user_example.lower() in true_examples]

            if not examples_intersection:
                return CheckResult.wrong("No correct examples are found.\n"
                                         "Make sure that you place every example in a new line \n"
                                         "and get rid of lists' commas, quotation marks and square brackets.")

            if len(true_examples) >= 10 and len(examples_intersection) < 10 or \
                    len(true_examples) < 10 and len(true_examples) != len(examples_intersection):
                return CheckResult.wrong("Please, output at least 5 examples for the given word\n"
                                         "(that is, 10 sentences, one for each of two languages). \n"
                                         "If there are less than 5 examples, output them all.\n"
                                         "Make sure that you place every sentence in a new line \n"
                                         "and get rid of lists' commas, quotation marks and square brackets.")

            return CheckResult.correct()


    def get_results(language, word):

        if language == "en":
            lang_to, lang_from = "english", "french"
        else:
            lang_to, lang_from = "french", "english"
        url = f"https://context.reverso.net/translation/{lang_from}-{lang_to}/{word}"
        user_agent = 'Mozilla/5.0'
        response = requests.get(url, headers={'User-Agent': user_agent})

        raw_contents = BeautifulSoup(response.content, 'html.parser')
        # translate words
        translations = raw_contents.find_all('a', {"class": 'translation'})
        # example sentences
        sentences_src, sentences_target = \
            raw_contents.find_all('div', {"class": "src ltr"}), raw_contents.find_all('div', {"class": ["trg ltr", "trg rtl arabic", "trg rtl"]})

        translation_list = [translation.get_text().strip().lower() for translation in translations]
        sentence_list = [sentence.get_text().strip().lower() for sentence in
                         list(chain(*[sentence_pair for sentence_pair in zip(sentences_src, sentences_target)]))]

        return set(translation_list), set(sentence_list)


    if __name__ == '__main__':
        TranslatorTest('translator.translator').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/99/stages/545/implement#comment
status: Solved
record: 3
